#! /usr/bin/env python3

from datetime import datetime, UTC
import os
import sys

import click

import pyargus.client
import httpx
import types

config = {
    "ARGUS_SYNC_SOURCE_NAME": "prometheus",
    "ARGUS_SYNC_RESOLVE_MIN_AGE": 10,
    "VERBOSE": False
}

# Adapted from Flask's `Config.from_pyfile`
def load_config(filename):
    d = types.ModuleType("config")
    d.__file__ = filename
    try:
        with open(filename, mode="rb") as config_file:
            exec(compile(config_file.read(), filename, "exec"), d.__dict__)
    except OSError as e:
        e.strerr = f"Unable to load configuration file ({e.strerror})"
        raise

    for key in dir(d):
        if key.isupper():
            config[key] = getattr(d, key)

    # Ensure that required configuration parameters are set
    required_keys = [
        "ARGUS_API_URL",
        "ARGUS_API_TOKEN",
        "ARGUS_SYNC_ALERTMANAGER_URL",
    ]
    for k in required_keys:
        if k not in config:
            raise RuntimeError(f"Required config value '{k}' not set")

def get_am_alerts():
    endpoint = config["ARGUS_SYNC_ALERTMANAGER_URL"] + "/alerts"
    resp = httpx.get(endpoint)
    if resp.status_code != 200:
        raise RuntimeError(f"Error getting alerts ({resp.status_code} {resp.reason_phrase})")
    return resp.json()

def vprint(msg):
    if config["VERBOSE"]:
        print(msg, file=sys.stderr)

@click.command(help="Resolve incidents that don't have a matching alert in AlertManager")
@click.option('--config', 'config_path',
              type=click.Path(exists=True),
              help="Path to config file")
@click.option('--dry-run', '-d', is_flag=True,
              help="Print which actions would be taken")
@click.option('--verbose', '-v', is_flag=True,
              help="Verbose output")
def main(config_path, dry_run, verbose):
    config["VERBOSE"] = verbose
    
    if config_path is None:
        config_path = os.environ["PROM_ARGUS_SETTINGS"]

    vprint(f"Loading config from '{config_path}'")
    load_config(config_path)

    argus_client = pyargus.client.Client(
        api_root_url=config["ARGUS_API_URL"],
        token=config["ARGUS_API_TOKEN"])

    vprint("Retrieving current alerts from AlertManager")
    vprint(f"  URL: {config["ARGUS_SYNC_ALERTMANAGER_URL"]}")

    alerts = get_am_alerts()
    # Since we only care about the fingerprints, turn the
    # list of alerts into a set of fingerprints
    fingerprints = { a["fingerprint"] for a in alerts }
    vprint(f"Got {len(fingerprints)} alerts")

    vprint("Retrieving open incidents from Argus")
    vprint(f"  URL:         {config["ARGUS_API_URL"]}")
    vprint(f"  Source Name: {config["ARGUS_SYNC_SOURCE_NAME"]}")
    vprint(f"  Min Age:     {config["ARGUS_SYNC_RESOLVE_MIN_AGE"]} minutes")

    incidents = argus_client.get_incidents(
        open=True,
        stateful=True,
        source__name__in=config["ARGUS_SYNC_SOURCE_NAME"],
        duration__gte=config["ARGUS_SYNC_RESOLVE_MIN_AGE"])

    missing = []

    num_incidents = 0
    for i in incidents:
        num_incidents += 1
        # Split the source_incident_id to get the fingerprint part
        source_id = i.source_incident_id.split("_")[0]

        if source_id not in fingerprints:
            missing.append(i)

    vprint(f"{len(missing)}/{num_incidents} incidents without a matching alert")

    # Get the current time in the UTC timezone to avoid timezone
    # issues between this script and Argus
    utc_now = datetime.now(UTC)

    for i in missing:
        if dry_run or verbose:
            print(f"Resolving Incident {i.pk} ({i.description})", file=sys.stderr)

        if not dry_run:
            argus_client.resolve_incident(
                incident=i.pk,
                timestamp=utc_now,
                description="Automatically resolved by argus_sync")

    return 0

if __name__ == "__main__":
    exit(main())
